{"version":3,"sources":["screens/MainScreen/components/form/index.js","screens/MainScreen/components/card/index.js","screens/MainScreen/index.js","App.js","index.js"],"names":["CForm","props","updateMainState","name","value","onUpdateStateValue","handleFormChange","event","target","setState","replaceMissingChars","cardNumber","cardNumberTmp","split","cardNumberArr","maskedCardNumber","forEach","val","index","push","join","onCardNumberChange","replace","test","trimRight","onCvvFocus","onCvvBlur","currentYear","Date","getFullYear","state","cardMonth","cardYear","monthsArr","Array","from","x","i","month","yearsArr","this","cardNumberRef","current","selectionStart","prevProps","prevState","cursorIdx","node","cardNum","prevCardNum","length","selectionEnd","cardHolderRef","cardDateRef","cardCvvRef","onCardInputFocus","onCardInputBlur","className","children","htmlFor","type","autoComplete","onChange","maxLength","ref","onFocus","e","onBlur","disabled","map","key","Component","CARDS","visa","amex","mastercard","discover","unionpay","troy","Card","cardType","re","number","Object","entries","card","pattern","RegExp","match","cardBackgroundName","random","Math","floor","removeEmptySpaces","shouldMaskNumber","outlineElementStyle","element","width","offsetWidth","height","offsetHeight","transform","offsetLeft","offsetTop","backgroundImgname","style","counter","currentFocusedElm","cardHolder","cardCvv","isCardFlipped","onCardElementClick","cardHolderArr","maskCardNumber","alt","src","process","staticFilesUrl","onClick","TransitionGroup","component","CSSTransition","classNames","timeout","SwitchTransition","in-out","out-in","toString","substr","MainScreen","initialState","useState","formFieldsRefObj","useRef","cardDate","focusFormFieldByKey","focus","cardElementsRef","_event","inputName","App","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.61e3ac8b.chunk.js","sourcesContent":["import React, { Component } from 'react';\n\nclass CForm extends Component {\n    constructor(props) {\n        super(props);\n\n        const currentYear = new Date().getFullYear();\n        this.state = {\n            cardNumber: '',\n            cardMonth: '',\n            cardYear: '',\n            monthsArr: Array.from(new Array(12), (x, i) => {\n                const month = i + 1;\n                return month <= 9 ? '0' + month : month;\n            }),\n            yearsArr: Array.from(new Array(9), (x, i) => currentYear + i)\n        };\n    }\n\n    updateMainState = (name, value) => {\n        this.props.onUpdateStateValue({\n            name,\n            value\n        });\n    };\n\n    handleFormChange = event => {\n        const { name, value } = event.target;\n\n        this.setState({ [name]: value });\n        this.updateMainState(name, value);\n    };\n\n    replaceMissingChars = cardNumber => {\n        let cardNumberTmp = '#### #### #### ####';\n        cardNumberTmp = cardNumberTmp.split('');\n        let cardNumberArr = cardNumber.split('');\n\n        let maskedCardNumber = [];\n        cardNumberTmp.forEach((val, index) => {\n            cardNumberArr[index]\n                ? maskedCardNumber.push(cardNumberArr[index])\n                : maskedCardNumber.push(val);\n        });\n\n        return maskedCardNumber.join('');\n    };\n\n    onCardNumberChange = event => {\n        let { value, name } = event.target;\n        let cardNumber = value;\n        value = value.replace(/\\D/g, '');\n        if (/^3[47]\\d{0,13}$/.test(value)) {\n            cardNumber = value\n                .replace(/(\\d{4})/, '$1 ')\n                .replace(/(\\d{4}) (\\d{6})/, '$1 $2 ');\n        } else if (/^3(?:0[0-5]|[68]\\d)\\d{0,11}$/.test(value)) {\n            // diner's club, 14 digits\n            cardNumber = value\n                .replace(/(\\d{4})/, '$1 ')\n                .replace(/(\\d{4}) (\\d{6})/, '$1 $2 ');\n        } else if (/^\\d{0,16}$/.test(value)) {\n            // regular cc number, 16 digits\n            cardNumber = value\n                .replace(/(\\d{4})/, '$1 ')\n                .replace(/(\\d{4}) (\\d{4})/, '$1 $2 ')\n                .replace(/(\\d{4}) (\\d{4}) (\\d{4})/, '$1 $2 $3 ');\n        }\n\n        this.setState({ [name]: cardNumber.trimRight() });\n        this.updateMainState(name, cardNumber);\n    };\n\n    onCvvFocus = event => {\n        this.updateMainState('isCardFlipped', true);\n    };\n\n    onCvvBlur = event => {\n        this.updateMainState('isCardFlipped', false);\n    };\n\n    getSnapshotBeforeUpdate() {\n      return this.props.cardNumberRef.current.selectionStart;\n    }\n\n    /* Modifying the cardNumber input anywhere but the end of\n    the line causes the cursor to jump to the end. This is\n    because the value is reformatted with different spacing\n    (ie. react doesn't know what to do with the cursor for\n    changes between re-renders)\n\n    https://github.com/facebook/react/issues/955#issuecomment-150714427\n\n    This issue is fixed by manually repositioning the cursor\n    to account for any additional spacing that is added/removed\n    */\n    componentDidUpdate(prevProps, prevState, cursorIdx) {\n      const node = this.props.cardNumberRef.current;\n      const { cardNumber: cardNum } = this.state;\n      const { cardNumber: prevCardNum } = prevState;\n      if (\n        cardNum.length > prevCardNum.length &&\n        cardNum[cursorIdx - 1] === \" \"\n      ) {\n        cursorIdx += 1;\n      } else if (prevCardNum[cursorIdx - 1] === \" \") {\n        cursorIdx -= 1;\n      }\n      node.selectionStart = node.selectionEnd = cursorIdx;\n    }\n\n    render() {\n        const { cardMonth, cardYear, monthsArr, yearsArr } = this.state;\n        const {\n            cardNumberRef,\n            cardHolderRef,\n            cardDateRef,\n            cardCvvRef,\n            onCardInputFocus,\n            onCardInputBlur\n        } = this.props;\n        return (\n            <div className=\"card-form\">\n                <div className=\"card-list\">{this.props.children}</div>\n                <div className=\"card-form__inner\">\n                    <div className=\"card-input\">\n                        <label\n                            htmlFor=\"cardNumber\"\n                            className=\"card-input__label\"\n                        >\n                            Card Number\n                        </label>\n                        <input\n                            type=\"tel\"\n                            name=\"cardNumber\"\n                            className=\"card-input__input\"\n                            autoComplete=\"off\"\n                            onChange={this.onCardNumberChange}\n                            maxLength=\"19\"\n                            ref={cardNumberRef}\n                            onFocus={e => onCardInputFocus(e, 'cardNumber')}\n                            onBlur={onCardInputBlur}\n                            value={this.state.cardNumber}\n                        />\n                    </div>\n\n                    <div className=\"card-input\">\n                        <label htmlFor=\"cardName\" className=\"card-input__label\">\n                            Card Holder\n                        </label>\n                        <input\n                            type=\"text\"\n                            className=\"card-input__input\"\n                            autoComplete=\"off\"\n                            name=\"cardHolder\"\n                            onChange={this.handleFormChange}\n                            ref={cardHolderRef}\n                            onFocus={e => onCardInputFocus(e, 'cardHolder')}\n                            onBlur={onCardInputBlur}\n                        />\n                    </div>\n\n                    <div className=\"card-form__row\">\n                        <div className=\"card-form__col\">\n                            <div className=\"card-form__group\">\n                                <label\n                                    htmlFor=\"cardMonth\"\n                                    className=\"card-input__label\"\n                                >\n                                    Expiration Date\n                                </label>\n                                <select\n                                    className=\"card-input__input -select\"\n                                    value={cardMonth}\n                                    name=\"cardMonth\"\n                                    onChange={this.handleFormChange}\n                                    ref={cardDateRef}\n                                    onFocus={e =>\n                                        onCardInputFocus(e, 'cardDate')\n                                    }\n                                    onBlur={onCardInputBlur}\n                                >\n                                    <option value=\"\" disabled>\n                                        Month\n                                    </option>\n\n                                    {monthsArr.map((val, index) => (\n                                        <option key={index} value={val}>\n                                            {val}\n                                        </option>\n                                    ))}\n                                </select>\n                                <select\n                                    name=\"cardYear\"\n                                    className=\"card-input__input -select\"\n                                    value={cardYear}\n                                    onChange={this.handleFormChange}\n                                    onFocus={e =>\n                                        onCardInputFocus(e, 'cardDate')\n                                    }\n                                    onBlur={onCardInputBlur}\n                                >\n                                    <option value=\"\" disabled>\n                                        Year\n                                    </option>\n\n                                    {yearsArr.map((val, index) => (\n                                        <option key={index} value={val}>\n                                            {val}\n                                        </option>\n                                    ))}\n                                </select>\n                            </div>\n                        </div>\n                        <div className=\"card-form__col -cvv\">\n                            <div className=\"card-input\">\n                                <label\n                                    htmlFor=\"cardCvv\"\n                                    className=\"card-input__label\"\n                                >\n                                    CVV\n                                </label>\n                                <input\n                                    type=\"tel\"\n                                    className=\"card-input__input\"\n                                    maxLength=\"4\"\n                                    autoComplete=\"off\"\n                                    name=\"cardCvv\"\n                                    onChange={this.handleFormChange}\n                                    onFocus={this.onCvvFocus}\n                                    onBlur={this.onCvvBlur}\n                                    ref={cardCvvRef}\n                                />\n                            </div>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default CForm;\n","import React, { Component } from 'react';\nimport {\n    CSSTransition,\n    TransitionGroup,\n    SwitchTransition\n} from 'react-transition-group';\nimport './styles.scss';\n\nconst CARDS = {\n    visa: '^4',\n    amex: '^(34|37)',\n    mastercard: '^5[1-5]',\n    discover: '^6011',\n    unionpay: '^62',\n    troy: '^9792'\n};\n\n// this is used so Sandbox can read the github images\nconst staticFilesUrl =\n    process.env.PUBLIC_URL ||\n    'https://raw.githubusercontent.com/jasminmif/react-interactive-paycard/master/public/';\n\nclass Card extends Component {\n    constructor() {\n        super();\n\n        const backgroundImgname = this.cardBackgroundName();\n        this.state = {\n            style: {},\n            counter: 0,\n            backgroundImgname: backgroundImgname\n        };\n    }\n\n    // Url for Background from git\n    // process.ENV.PUBLIC_URL is null than get the images from\n    // https://raw.githubusercontent.com/jasminmif/react-interactive-paycard/master/public/card-background/1.jpeg\n    // for the sandbox to work\n\n    cardType = () => {\n        const number = this.props.cardNumber;\n        let re;\n        for (const [card, pattern] of Object.entries(CARDS)) {\n            re = new RegExp(pattern);\n            if (number.match(re) != null) {\n                return card;\n            }\n        }\n\n        return 'visa'; // default type\n    };\n\n    cardBackgroundName = () => {\n        let random = Math.floor(Math.random() * 25 + 1);\n        return `${random}.jpeg`;\n    };\n\n    removeEmptySpaces = cardNumber => {\n        return cardNumber.replace(/\\s+/g, '');\n    };\n\n    shouldMaskNumber = (cardNumber, index) => {\n        if (cardNumber.length === 15) {\n            return index > 4 && index < 12;\n        } else {\n            return index > 4 && index < 13;\n        }\n    };\n\n    outlineElementStyle = element =>\n        element\n            ? {\n                  width: `${element.offsetWidth}px`,\n                  height: `${element.offsetHeight}px`,\n                  transform: `translateX(${element.offsetLeft}px) translateY(${element.offsetTop}px)`\n              }\n            : null;\n\n    componentDidUpdate(prevProps) {\n        const { currentFocusedElm } = this.props;\n        if (\n            currentFocusedElm &&\n            currentFocusedElm !== prevProps.currentFocusedElm\n        ) {\n            const style = this.outlineElementStyle(currentFocusedElm);\n            this.setState({ style });\n        }\n    }\n\n    maskCardNumber(cardNumber) {\n        let cardNumberArr = cardNumber.split('');\n        cardNumberArr.forEach((val, index) => {\n            if (index > 4 && index < 14) {\n                if (cardNumberArr[index] !== ' ') {\n                    cardNumberArr[index] = '*';\n                }\n            }\n        });\n\n        return cardNumberArr;\n    }\n\n    render() {\n        let {\n            cardHolder,\n            cardNumber,\n            cardMonth,\n            cardYear,\n            cardCvv,\n            isCardFlipped,\n            currentFocusedElm,\n            onCardElementClick,\n            cardNumberRef,\n            cardHolderRef,\n            cardDateRef\n        } = this.props;\n\n        const cardHolderArr = cardHolder.split('');\n        const cardNumberArr = this.maskCardNumber(cardNumber);\n        cardCvv = cardCvv.split('');\n\n        return (\n            <div className={'card-item ' + (isCardFlipped ? '-active' : '')}>\n                <div className=\"card-item__side -front\">\n                    <div\n                        className={`card-item__focus ${\n                            currentFocusedElm ? `-active` : ``\n                        }`}\n                        style={this.state.style}\n                    />\n                    <div className=\"card-item__cover\">\n                        <img\n                            alt=\"\"\n                            src={\n                                staticFilesUrl +\n                                `/card-background/${this.state.backgroundImgname}`\n                            }\n                            className=\"card-item__bg\"\n                        />\n                    </div>\n\n                    <div className=\"card-item__wrapper\">\n                        <div className=\"card-item__top\">\n                            <img\n                                src={staticFilesUrl + '/chip.png'}\n                                alt=\"\"\n                                className=\"card-item__chip\"\n                            />\n                            <div className=\"card-item__type\">\n                                <img\n                                    alt={this.cardType()}\n                                    src={\n                                        staticFilesUrl +\n                                        `/card-type/${this.cardType()}.png`\n                                    }\n                                    className=\"card-item__typeImg\"\n                                />\n                            </div>\n                        </div>\n\n                        <label\n                            className=\"card-item__number\"\n                            ref={cardNumberRef}\n                            onClick={() => onCardElementClick('cardNumber')}\n                        >\n                            <TransitionGroup\n                                className=\"slide-fade-up\"\n                                component=\"div\"\n                            >\n                                {cardNumber ? (\n                                    cardNumberArr.map((val, index) => (\n                                        <CSSTransition\n                                            classNames=\"slide-fade-up\"\n                                            timeout={250}\n                                            key={index}\n                                        >\n                                            <div className=\"card-item__numberItem\">\n                                                {val}\n                                            </div>\n                                        </CSSTransition>\n                                    ))\n                                ) : (\n                                    <CSSTransition\n                                        classNames=\"slide-fade-up\"\n                                        timeout={250}\n                                    >\n                                        <div className=\"card-item__numberItem\">\n                                            #\n                                        </div>\n                                    </CSSTransition>\n                                )}\n                            </TransitionGroup>\n                        </label>\n                        <div className=\"card-item__content\">\n                            <label\n                                className=\"card-item__info\"\n                                onClick={() => onCardElementClick('cardHolder')}\n                                ref={cardHolderRef}\n                            >\n                                <div className=\"card-item__holder\">\n                                    Card Holder\n                                </div>\n                                <div className=\"card-item__name\">\n                                    <TransitionGroup\n                                        className=\"slide-fade-up\"\n                                        component=\"div\"\n                                    >\n                                        {cardHolder === 'FULL NAME' ? (\n                                            <CSSTransition\n                                                classNames=\"slide-fade-up\"\n                                                timeout={250}\n                                            >\n                                                <div>FULL NAME</div>\n                                            </CSSTransition>\n                                        ) : (\n                                            cardHolderArr.map((val, index) => (\n                                                <CSSTransition\n                                                    timeout={250}\n                                                    classNames=\"slide-fade-right\"\n                                                    key={index}\n                                                >\n                                                    <span className=\"card-item__nameItem\">\n                                                        {val}\n                                                    </span>\n                                                </CSSTransition>\n                                            ))\n                                        )}\n                                    </TransitionGroup>\n                                </div>\n                            </label>\n                            <div\n                                className=\"card-item__date\"\n                                onClick={() => onCardElementClick('cardDate')}\n                                ref={cardDateRef}\n                            >\n                                <label className=\"card-item__dateTitle\">\n                                    Expires\n                                </label>\n                                <label className=\"card-item__dateItem\">\n                                    <SwitchTransition in-out>\n                                        {!cardMonth ? (\n                                            <CSSTransition\n                                                classNames=\"slide-fade-up\"\n                                                timeout={250}\n                                                key={cardMonth}\n                                            >\n                                                <span>MM</span>\n                                            </CSSTransition>\n                                        ) : (\n                                            <CSSTransition\n                                                classNames=\"slide-fade-up\"\n                                                timeout={250}\n                                                key={cardMonth}\n                                            >\n                                                <span>{cardMonth}</span>\n                                            </CSSTransition>\n                                        )}\n                                    </SwitchTransition>\n                                </label>\n                                /\n                                <label\n                                    htmlFor=\"cardYear\"\n                                    className=\"card-item__dateItem\"\n                                >\n                                    <SwitchTransition out-in>\n                                        {!cardYear ? (\n                                            <CSSTransition\n                                                classNames=\"slide-fade-up\"\n                                                timeout={250}\n                                                key={cardYear}\n                                            >\n                                                <span>YY</span>\n                                            </CSSTransition>\n                                        ) : (\n                                            <CSSTransition\n                                                classNames=\"slide-fade-up\"\n                                                timeout={250}\n                                                key={cardYear}\n                                            >\n                                                <span>\n                                                    {cardYear\n                                                        .toString()\n                                                        .substr(-2)}\n                                                </span>\n                                            </CSSTransition>\n                                        )}\n                                    </SwitchTransition>\n                                </label>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n\n                <div className=\"card-item__side -back\">\n                    <div className=\"card-item__cover\">\n                        <img\n                            alt=\"\"\n                            src={\n                                staticFilesUrl +\n                                `/card-background/${this.state.backgroundImgname}`\n                            }\n                            className=\"card-item__bg\"\n                        />\n                    </div>\n                    <div className=\"card-item__band\" />\n                    <div className=\"card-item__cvv\">\n                        <div className=\"card-item__cvvTitle\">CVV</div>\n                        <div className=\"card-item__cvvBand\">\n                            <TransitionGroup>\n                                {cardCvv.map((val, index) => (\n                                    <CSSTransition\n                                        classNames=\"zoom-in-out\"\n                                        key={index}\n                                        timeout={250}\n                                    >\n                                        <span>*</span>\n                                    </CSSTransition>\n                                ))}\n                            </TransitionGroup>\n                        </div>\n                        <div className=\"card-item__type\">\n                            <img\n                                alt=\"card-type\"\n                                src={staticFilesUrl + '/card-type/visa.png'}\n                                className=\"card-item__typeImg\"\n                            />\n                        </div>\n                    </div>\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default Card;\n","import React, { useState, useRef } from \"react\";\nimport CForm from \"./components/form\";\nimport Card from \"./components/card\";\n\nconst defaultCardNo = \"#### #### #### ####\";\nconst defaultCardHolderName = \"FULL NAME\";\nconst defaultCardMonth = \"\";\nconst defaultCardYear = \"\";\nconst defaultCardCvv = \"\";\n\nconst MainScreen = () => {\n\tconst initialState = {\n\t\tcardNumber: defaultCardNo,\n\t\tcardHolder: defaultCardHolderName,\n\t\tcardMonth: defaultCardMonth,\n\t\tcardYear: defaultCardYear,\n\t\tcardCvv: defaultCardCvv,\n\t\tisCardFlipped: false,\n\t\tcurrentFocusedElm: null\n\t};\n\tconst [state, setState] = useState(initialState);\n\n\tconst updateStateValue = ({ name, value }) => {\n\t\tsetState({\n\t\t\t...state,\n\t\t\t[name]: value || initialState[name]\n\t\t});\n\t};\n\n\tconst {\n\t\tcardNumber,\n\t\tcardHolder,\n\t\tcardMonth,\n\t\tcardYear,\n\t\tcardCvv,\n\t\tisCardFlipped\n\t} = state;\n\tlet { currentFocusedElm } = state;\n\n\t// References for the Form Inputs\n\tlet formFieldsRefObj = {\n\t\tcardNumber: useRef(),\n\t\tcardHolder: useRef(),\n\t\tcardDate: useRef(),\n\t\tcardCvv: useRef()\n\t};\n\n\tlet onCardElementClick = key => {\n\t\tfocusFormFieldByKey(key);\n\t};\n\n\tlet focusFormFieldByKey = key => {\n\t\tformFieldsRefObj[key].current.focus();\n\t};\n\n\t// This are the references for the Card DIV elements\n\tlet cardElementsRef = {\n\t\tcardNumber: null,\n\t\tcardHolder: null,\n\t\tcardDate: null\n\t};\n\n\tlet onCardFormInputFocus = (_event, inputName) => {\n\t\tsetState({\n\t\t\t...state,\n\t\t\tcurrentFocusedElm: cardElementsRef[inputName]\n\t\t});\n\t};\n\n\tlet onCardInputBlur = event => {\n\t\tsetState({\n\t\t\t...state,\n\t\t\tcurrentFocusedElm: null\n\t\t});\n\t};\n\n\treturn (\n\t\t<div className=\"wrapper\">\n\t\t\t<CForm\n\t\t\t\tonUpdateStateValue={updateStateValue}\n\t\t\t\tcardNumberRef={formFieldsRefObj.cardNumber}\n\t\t\t\tcardHolderRef={formFieldsRefObj.cardHolder}\n\t\t\t\tcardDateRef={formFieldsRefObj.cardDate}\n\t\t\t\tonCardInputFocus={onCardFormInputFocus}\n\t\t\t\tonCardInputBlur={onCardInputBlur}\n\t\t\t>\n\t\t\t\t<Card\n\t\t\t\t\tcardNumber={cardNumber}\n\t\t\t\t\tcardHolder={cardHolder}\n\t\t\t\t\tcardMonth={cardMonth}\n\t\t\t\t\tcardYear={cardYear}\n\t\t\t\t\tcardCvv={cardCvv}\n\t\t\t\t\tisCardFlipped={isCardFlipped}\n\t\t\t\t\tcurrentFocusedElm={currentFocusedElm}\n\t\t\t\t\tonCardElementClick={onCardElementClick}\n\t\t\t\t\tcardNumberRef={node =>\n\t\t\t\t\t\t(cardElementsRef[\"cardNumber\"] = node)\n\t\t\t\t\t}\n\t\t\t\t\tcardHolderRef={node =>\n\t\t\t\t\t\t(cardElementsRef[\"cardHolder\"] = node)\n\t\t\t\t\t}\n\t\t\t\t\tcardDateRef={node => (cardElementsRef[\"cardDate\"] = node)}\n\t\t\t\t></Card>\n\t\t\t</CForm>\n\t\t</div>\n\t);\n};\n\nexport default MainScreen;\n","import React from 'react';\nimport './App.scss';\nimport MainScreen from './screens/MainScreen';\n\nfunction App() {\n    return (\n        <div className=\"App\">\n            <MainScreen />\n        </div>\n    );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}